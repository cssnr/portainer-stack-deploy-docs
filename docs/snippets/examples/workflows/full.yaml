name: "Portainer Stack Deploy"

on:
  workflow_dispatch:
    inputs:
      tags:
        description: "Tags: comma,separated"
        required: true
        default: "latest"
  release:
    types: [published]

env:
  registry: ghcr.io
  stack-file: docker-compose-swarm.yaml
  stack-name: ${{ github.repository_owner }}-${{ github.event.repository.name }}
  version: ${{ github.ref_name == 'master' && 'latest' || github.ref_name }}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
  name: "Build"
  runs-on: ubuntu-latest
  timeout-minutes: 30

  permissions:
    contents: write
    packages: write

  steps:
    - name: "Checkout"
      uses: actions/checkout@v5

    - name: "Debug Variables"
      continue-on-error: true
      run: |
        echo "VERSION: ${{ env.version == 'master' && 'latest' || env.version }}"
        echo "STACK_NAME: ${{ env.stack-name }}"

    - name: "Docker Login"
      uses: docker/login-action@v3
      with:
        registry: ${{ env.registry }}
        username: ${{ vars.GHCR_USER }}
        password: ${{ secrets.GHCR_PASS }}

    - name: "Setup Buildx"
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: "Generate Docker Tags"
      id: tags
      uses: cssnr/docker-tags-action@v1
      with:
        images: $${{ env.registry }}/${{ github.repository }}
        tags: ${{ inputs.tags }}

    - name: "Debug Docker Tags"
      continue-on-error: true
      run: |
        echo "github.ref_name: ${{ github.ref_name }}"
        echo "tags: ${{ steps.tags.outputs.tags }}"
        echo "labels: ${{ steps.tags.outputs.labels }}"
        echo "annotations: ${{ steps.tags.outputs.annotations }}"

    - name: "Build and Push"
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.tags.outputs.tags }}
        labels: ${{ steps.tags.outputs.labels }}
        annotations: ${{ steps.tags.outputs.annotations }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: build

    steps:
      - name: "Checkout"
        uses: actions/checkout@v5

      - name: "Portainer Deploy"
        uses: cssnr/portainer-stack-deploy-action@v1
        with:
          url: ${{ secrets.PORTAINER_URL }}
          token: ${{ secrets.PORTAINER_TOKEN }}
          file: ${{ env.stack-file }}
          name: ${{ env.stack-name }}
          username: ${{ vars.GHCR_USER }}
          password: ${{ secrets.GHCR_PASS }}
          env_data: |
            {
              "VERSION": "$${{ github.ref_name }}",
              "STACK_NAME": "${{ env.stack-name }}",
            }

  cleanup:
    name: "Cleanup"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy

    steps:
      - name: "Purge Cache"
        uses: cssnr/cloudflare-purge-cache-action@v2
        with:
          token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          zones: cssnr.com
